import api from './api';

export default {
  getAll() {
    return api.get('/customers');
  },
  getById(id) {
    return api.get(`/customers/${id}`);
  },
  async create(customer) {
    try {
      console.log('üîß Iniciando cria√ß√£o de cliente...');
      console.log('Dados recebidos:', customer);

      // Validar dados antes de enviar
      if (!customer.name || !customer.email || !customer.phone) {
        console.error('‚ùå Valida√ß√£o falhou: campos obrigat√≥rios n√£o preenchidos');
        throw new Error('Dados do cliente inv√°lidos. Por favor, preencha todos os campos obrigat√≥rios.');
      }

      // Remover espa√ßos em branco
      const customerData = {
        name: customer.name.trim(),
        email: customer.email.trim().toLowerCase(),
        phone: customer.phone.trim(),
        address: customer.address?.trim() || ''
      };
      
      console.log('üìù Dados formatados:', customerData);

      // Obter o ID do usu√°rio do token
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('‚ùå Token n√£o encontrado');
        throw new Error('Usu√°rio n√£o autenticado');
      }

      // Verificar se o token √© v√°lido e n√£o expirou
      const decoded = JSON.parse(atob(token.split('.')[1]));
      const userId = decoded.sub;
      
      console.log('üîë Token decodificado:', decoded);
      console.log('üë§ UserId encontrado:', userId);

      // Verificar se o userId √© um n√∫mero v√°lido
      if (!userId || isNaN(userId)) {
        console.error('‚ùå UserId inv√°lido:', userId);
        throw new Error('ID do usu√°rio inv√°lido');
      }

      console.log('üì° Enviando requisi√ß√£o para criar cliente...');

      const response = await api.post('/customers', customerData);
      
      console.log('‚úÖ Cliente criado com sucesso:', response.data);
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao criar cliente:', error);
      
      // Extrair mensagem de erro espec√≠fica
      let errorMessage = 'Erro ao criar cliente';
      
      if (error.response?.status === 409) {
        errorMessage = 'Um cliente com este email j√° existe';
      } else if (error.response?.status === 401) {
        errorMessage = 'Sess√£o expirada. Fa√ßa login novamente.';
      } else if (error.response?.status === 400) {
        errorMessage = error.response.data?.message || 'Dados inv√°lidos. Verifique os campos.';
      } else if (error.message) {
        errorMessage = error.message;
      }

      throw new Error(errorMessage);
    }
  },
  async update(id, customer) {
    try {
      console.log('üîß Atualizando cliente:', id);
      console.log('Dados:', customer);
      
      const response = await api.put(`/customers/${id}`, customer);
      console.log('‚úÖ Cliente atualizado com sucesso');
      return response;
    } catch (error) {
      console.error('‚ùå Erro ao atualizar cliente:', error);
      throw error;
    }
  },
  async delete(id) {
    try {
      console.log('üóëÔ∏è Excluindo cliente:', id);
      
      const response = await api.delete(`/customers/${id}`);
      console.log('‚úÖ Cliente exclu√≠do com sucesso');
      return response;
    } catch (error) {
      console.error('‚ùå Erro ao excluir cliente:', error);
      throw error;
    }
  }
}
