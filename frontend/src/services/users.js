import api from './api';

const setupToken = () => {
  const token = localStorage.getItem('token');
  if (token) {
    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }
};

export default {
  // Listar todos os usu√°rios
  async getAll() {
    setupToken();
    try {
      console.log('üë• Buscando todos os usu√°rios...');
      const response = await api.get('/users');
      console.log('‚úÖ Usu√°rios encontrados:', response.data.length);
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error.response?.data || error.message);
      return {
        success: false,
        message: 'Erro ao buscar usu√°rios',
        error: error.response?.data || error.message
      };
    }
  },

  // Criar novo usu√°rio
  async create(userData) {
    setupToken();
    try {
      console.log('üë§ Criando novo usu√°rio:', userData);
      
      const response = await api.post('/users', userData);
      
      console.log('‚úÖ Usu√°rio criado com sucesso:', response.data);
      return {
        success: true,
        data: response.data,
        message: 'Usu√°rio criado com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error.response?.data || error.message);
      
      let errorMessage = 'Erro ao criar usu√°rio';
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.response?.status === 400) {
        errorMessage = 'Dados inv√°lidos';
      } else if (error.response?.status === 409) {
        errorMessage = 'Email j√° cadastrado';
      }
      
      return {
        success: false,
        message: errorMessage,
        error: error.response?.data || error.message
      };
    }
  },

  // Buscar usu√°rio por ID
  async getById(id) {
    setupToken();
    try {
      console.log('üë§ Buscando usu√°rio por ID:', id);
      const response = await api.get(`/users/${id}`);
      console.log('‚úÖ Usu√°rio encontrado:', response.data);
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio:', error.response?.data || error.message);
      return {
        success: false,
        message: 'Erro ao buscar usu√°rio',
        error: error.response?.data || error.message
      };
    }
  },

  // Atualizar usu√°rio
  async update(id, userData) {
    setupToken();
    try {
      console.log('üë§ Atualizando usu√°rio:', id, userData);
      
      const response = await api.put(`/users/${id}`, userData);
      
      console.log('‚úÖ Usu√°rio atualizado com sucesso:', response.data);
      return {
        success: true,
        data: response.data,
        message: 'Usu√°rio atualizado com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao atualizar usu√°rio:', error.response?.data || error.message);
      
      let errorMessage = 'Erro ao atualizar usu√°rio';
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.response?.status === 404) {
        errorMessage = 'Usu√°rio n√£o encontrado';
      } else if (error.response?.status === 400) {
        errorMessage = 'Dados inv√°lidos';
      }
      
      return {
        success: false,
        message: errorMessage,
        error: error.response?.data || error.message
      };
    }
  },

  // Deletar usu√°rio
  async delete(id) {
    setupToken();
    try {
      console.log('üë§ Deletando usu√°rio:', id);
      
      const response = await api.delete(`/users/${id}`);
      
      console.log('‚úÖ Usu√°rio deletado com sucesso');
      return {
        success: true,
        message: 'Usu√°rio deletado com sucesso'
      };
    } catch (error) {
      console.error('‚ùå Erro ao deletar usu√°rio:', error.response?.data || error.message);
      
      let errorMessage = 'Erro ao deletar usu√°rio';
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.response?.status === 404) {
        errorMessage = 'Usu√°rio n√£o encontrado';
      }
      
      return {
        success: false,
        message: errorMessage,
        error: error.response?.data || error.message
      };
    }
  },

  // Buscar usu√°rio por email
  async getByEmail(email) {
    setupToken();
    try {
      console.log('üë§ Buscando usu√°rio por email:', email);
      const response = await api.get(`/users/email/${email}`);
      console.log('‚úÖ Usu√°rio encontrado:', response.data);
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio por email:', error.response?.data || error.message);
      return {
        success: false,
        message: 'Erro ao buscar usu√°rio',
        error: error.response?.data || error.message
      };
    }
  },

  // Atualizar status do usu√°rio
  async updateStatus(id, status) {
    return this.update(id, { status });
  },

  // Atualizar role do usu√°rio
  async updateRole(id, role) {
    return this.update(id, { role });
  },

  // Buscar usu√°rios por role
  async getByRole(role) {
    setupToken();
    try {
      console.log('üë• Buscando usu√°rios por role:', role);
      const response = await api.get(`/users/role/${role}`);
      console.log('‚úÖ Usu√°rios encontrados:', response.data.length);
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios por role:', error.response?.data || error.message);
      return {
        success: false,
        message: 'Erro ao buscar usu√°rios',
        error: error.response?.data || error.message
      };
    }
  }
};
