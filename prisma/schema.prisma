generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PAID
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentType {
  BOLETO
  CARD
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  name        String
  role        UserRole     @default(CUSTOMER)
  status      UserStatus   @default(ACTIVE)
  avatarUrl   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  cart        Cart?        @relation(name: "UserToCart")
  addresses   Address[]    @relation(name: "AddressToUser", map: "Address_userId_fkey")
  cartItems   CartItem[]   @relation(name: "UserToCartItem")
  orders      Order[]      @relation(name: "UserToOrder")
  payments    Payment[]    @relation(name: "UserToPayment")
  reviews     Review[]     @relation(name: "UserToReview")
  wishlist    Wishlist[]   @relation(name: "UserToWishlist")
  customer    Customer?    @relation(name: "UserToCustomer")
  boletos     Boleto[]     @relation(name: "UserToBoleto")
  cards       Card[]       @relation(name: "UserToCard")

  @@index([email], map: "User_email_idx")
}

model Address {
  id        Int        @id @default(autoincrement())
  userId    Int
  street    String
  number    String
  city      String
  state     String
  zipCode   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], name: "AddressToUser", map: "Address_userId_fkey")
  orders    Order[]    @relation(name: "AddressToOrder", map: "Order_addressId_fkey")

  @@index([userId], map: "Address_userId_idx")
}

model Boleto {
  id        Int        @id @default(autoincrement())
  paymentId Int        @unique
  userId    Int
  url       String
  barCode   String
  dueDate   DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  payment   Payment    @relation(fields: [paymentId], references: [id], name: "BoletoToPayment")
  user      User       @relation(fields: [userId], references: [id], name: "UserToBoleto")

  @@index([paymentId], map: "Boleto_paymentId_idx")
  @@index([userId], map: "Boleto_userId_idx")
}

model Card {
  id        Int        @id @default(autoincrement())
  paymentId Int        @unique
  userId    Int
  number    String
  holder    String
  expiry    String
  cvv       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  payment   Payment    @relation(fields: [paymentId], references: [id], name: "CardToPayment")
  user      User       @relation(fields: [userId], references: [id], name: "UserToCard")

  @@index([paymentId], map: "Card_paymentId_idx")
  @@index([userId], map: "Card_userId_idx")
}

model Payment {
  id          Int           @id @default(autoincrement())
  orderId     Int           @unique
  userId      Int
  status      PaymentStatus
  type        PaymentType
  amount      Decimal
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  order       Order         @relation(fields: [orderId], references: [id], name: "PaymentToOrder")
  boleto      Boleto?       @relation(name: "BoletoToPayment")
  card        Card?         @relation(name: "CardToPayment")
  user        User          @relation(fields: [userId], references: [id], name: "UserToPayment")

  @@index([orderId], map: "Payment_orderId_idx")
  @@index([userId], map: "Payment_userId_idx")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[] @relation(name: "CartToCartItem")
  user      User       @relation(fields: [userId], references: [id], name: "UserToCart")

  @@index([userId], map: "Cart_userId_idx")
}

model CartItem {
  id        Int        @id @default(autoincrement())
  userId    Int
  cartId    Int
  productId Int
  quantity  Int        @default(1)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cart      Cart       @relation(fields: [cartId], references: [id], name: "CartToCartItem")
  product   Product    @relation(fields: [productId], references: [id], name: "ProductToCartItem")
  user      User       @relation(fields: [userId], references: [id], name: "UserToCartItem")

  @@index([cartId], map: "CartItem_cartId_idx")
  @@index([productId], map: "CartItem_productId_idx")
  @@index([userId], map: "CartItem_userId_idx")
  @@unique([cartId, productId], map: "CartItem_cartId_productId_key")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  slug      String     @unique
  parentId  Int?
  product   Product[]  @relation(name: "CategoryToProduct")
  parent    Category?  @relation(name: "CategoryToParentCategory", fields: [parentId], references: [id])
  children  Category[] @relation(name: "CategoryToParentCategory")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([parentId], map: "Category_parentId_idx")
}

model Customer {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  phone     String?
  address   String?
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], name: "UserToCustomer")
  orders    Order[]    @relation(name: "CustomerToOrder")

  @@index([userId], map: "Customer_userId_idx")
}

model Order {
  id          Int          @id @default(autoincrement())
  customerId  Int
  userId      Int
  addressId   Int
  status      OrderStatus
  amount      Decimal
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  customer    Customer     @relation(fields: [customerId], references: [id], name: "CustomerToOrder")
  user        User         @relation(fields: [userId], references: [id], name: "UserToOrder")
  address     Address      @relation(fields: [addressId], references: [id], name: "AddressToOrder")
  items       OrderItem[]  @relation(name: "OrderToOrderItem")
  payment     Payment?     @relation(name: "PaymentToOrder")

  @@index([customerId], map: "Order_customerId_idx")
  @@index([userId], map: "Order_userId_idx")
  @@index([addressId], map: "Order_addressId_idx")
}

model OrderItem {
  id        Int        @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int        @default(1)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  order     Order      @relation(fields: [orderId], references: [id], name: "OrderToOrderItem")
  product   Product    @relation(fields: [productId], references: [id], name: "ProductToOrderItem")

  @@index([orderId], map: "OrderItem_orderId_idx")
  @@index([productId], map: "OrderItem_productId_idx")
  @@unique([orderId, productId], map: "OrderItem_orderId_productId_key")
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  stock       Int
  status      ProductStatus @default(ACTIVE)
  categoryId  Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    Category      @relation(fields: [categoryId], references: [id], name: "CategoryToProduct")
  reviews     Review[]      @relation(name: "ProductToReview")
  orderItems  OrderItem[]   @relation(name: "ProductToOrderItem")
  cartItems   CartItem[]    @relation(name: "ProductToCartItem")
  images      ProductImage[] @relation(name: "ProductToImage")
  wishlist    Wishlist[]    @relation(name: "ProductToWishlist")

  @@index([categoryId], map: "Product_categoryId_idx")
}

model ProductImage {
  id        Int        @id @default(autoincrement())
  productId Int
  url       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  product   Product    @relation(fields: [productId], references: [id], name: "ProductToImage")

  @@index([productId], map: "ProductImage_productId_idx")
}

model Review {
  id        Int        @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  product   Product    @relation(fields: [productId], references: [id], name: "ProductToReview")
  user      User       @relation(fields: [userId], references: [id], name: "UserToReview")

  @@index([productId], map: "Review_productId_idx")
  @@index([userId], map: "Review_userId_idx")
  @@unique([productId, userId], map: "Review_productId_userId_key")
}

model Wishlist {
  id        Int        @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], name: "UserToWishlist")
  product   Product    @relation(fields: [productId], references: [id], name: "ProductToWishlist")

  @@index([userId], map: "Wishlist_userId_idx")
  @@index([productId], map: "Wishlist_productId_idx")
  @@unique([userId, productId], map: "Wishlist_userId_productId_key")
}